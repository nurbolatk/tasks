// List of sizes to generate for each
$spacing: 1rem;
$sizes: [0, 0.5, 1, 1.5, 2, 3];

@mixin generateSizing($prefix, $property) {
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    .#{$prefix}-#{$i - 1} {
      #{$property}: $spacing * $size;
    }
  }
}

@mixin generateSizingDouble($prefix) {
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);
    .#{$prefix}x-#{$i - 1} {
      margin: 0 $spacing * $size;
    }
    .#{$prefix}y-#{$i - 1} {
      margin: $spacing * $size 0;
    }
  }
}

$paddingrules: [ [pl, margin-left], [pt, margin-top], [pb, margin-bottom], [pr,
  margin-right], [p, margin], ];
$marginrules: [ [ml, margin-left], [mt, margin-top], [mb, margin-bottom], [mr,
  margin-right], [m, margin], ];

@each $item in $marginrules {
  @include generateSizing(nth($item, 1), nth($item, 2));
}
@each $item in $paddingrules {
  @include generateSizing(nth($item, 1), nth($item, 2));
}

@include generateSizingDouble(m);
@include generateSizingDouble(p);
